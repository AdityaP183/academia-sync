// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Admin {
    id    String @id @default(cuid())
    email String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Student {
    id        String   @id @default(cuid())
    email     String   @unique
    firstName String
    lastName  String
    gender    Gender
    phone     String   @unique
    avatar    String?
    bloodType String
    dob       DateTime

    addressId   String
    address     Address      @relation(fields: [addressId], references: [id])
    parentId    String
    parent      Parent       @relation(fields: [parentId], references: [id])
    classId     Int
    class       Class        @relation(fields: [classId], references: [id])
    gradeId     Int
    grade       Grade        @relation(fields: [gradeId], references: [id])
    result      Result[]
    attendances Attendance[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Teacher {
    id        String   @id @default(cuid())
    email     String   @unique
    firstName String
    lastName  String
    gender    Gender
    avatar    String?
    phone     String   @unique
    dob       DateTime

    addressId String
    address   Address   @relation(fields: [addressId], references: [id])
    subjects  Subject[]
    lessons   Lesson[]
    classes   Class[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Parent {
    id        String  @id @default(cuid())
    email     String  @unique
    firstName String
    lastName  String
    gender    Gender
    avatar    String?
    phone     String  @unique

    addressId String
    address   Address   @relation(fields: [addressId], references: [id])
    students  Student[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Grade {
    id    Int @id @default(autoincrement())
    level Int @unique

    students Student[]
    classes  Class[]
}

model Class {
    id       Int    @id @default(autoincrement())
    name     String @unique
    capacity Int

    supervisorId String?
    supervisor   Teacher?       @relation(fields: [supervisorId], references: [id])
    gradeId      Int
    grade        Grade          @relation(fields: [gradeId], references: [id])
    lessons      Lesson[]
    students     Student[]
    event        Event[]
    announcement Announcement[]
}

model Subject {
    id   Int    @id @default(autoincrement())
    name String

    teachers Teacher[]
    lessons  Lesson[]
}

model Lesson {
    id        Int       @id @default(autoincrement())
    name      String
    day       DayofWeek
    startTime DateTime
    endTime   DateTime

    subjectId   Int
    subject     Subject      @relation(fields: [subjectId], references: [id])
    classId     Int
    class       Class        @relation(fields: [classId], references: [id])
    teacherId   String
    teacher     Teacher      @relation(fields: [teacherId], references: [id])
    exams       Exam[]
    assignments Assignment[]
    attendances Attendance[]
}

model Exam {
    id        Int      @id @default(autoincrement())
    title     String
    startTime DateTime
    endTime   DateTime

    lessonId Int
    lesson   Lesson   @relation(fields: [lessonId], references: [id])
    results  Result[]
}

model Assignment {
    id        Int      @id @default(autoincrement())
    title     String
    startDate DateTime
    dueDate   DateTime

    lessonId Int
    lesson   Lesson   @relation(fields: [lessonId], references: [id])
    results  Result[]
}

model Result {
    id    Int @id @default(autoincrement())
    score Int

    studentId    String
    student      Student     @relation(fields: [studentId], references: [id])
    examId       Int?
    exam         Exam?       @relation(fields: [examId], references: [id])
    assignmentId Int?
    assignment   Assignment? @relation(fields: [assignmentId], references: [id])
}

model Attendance {
    id      Int      @id @default(autoincrement())
    date    DateTime
    present Boolean

    studentId String
    student   Student @relation(fields: [studentId], references: [id])
    lessonId  Int
    lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    startTime   DateTime
    endTime     DateTime

    classId Int?
    class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    date        DateTime

    classId Int?
    class   Class? @relation(fields: [classId], references: [id])
}

model Address {
    id      String @id @default(cuid())
    street  String
    city    String
    state   String
    country String
    zipcode String

    student Student[]
    teacher Teacher[]
    parent  Parent[]
}

enum DayofWeek {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
}

enum Gender {
    MALE
    FEMALE
    OTHERS
}
